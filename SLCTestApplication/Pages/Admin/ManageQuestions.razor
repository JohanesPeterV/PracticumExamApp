@page "/ManageQuestions"
@inject ApplicationDbContext _context
@inject MudBlazor.ISnackbar _snackBar
@attribute [Authorize(Roles = "Admin")]
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@EditState Question</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="Question.Body" Label="Body" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudSelect  Label="QuestionType" T="String" Variant="Variant.Text" Margin="Margin.Normal"  SelectedValues="@(new HashSet<string> {Question.QuestionType})"  ValueChanged="e => OnTypeChange(e)" >
             <MudSelectItem Value="@("MultipleChoice")"/>
             <MudSelectItem Value="@("TrueOrFalse")"/>
             <MudSelectItem Value="@("ChooseOne")"/>
             <MudSelectItem Value="@("Essay")"/>
             <MudSelectItem Value="@("SubmitFile")"/>
        </MudSelect>
        @if (ChoiceAdapterList!=null && ChoiceAdapterList.Count()>0)
        {
            int t = 1;
        <MudForm>
            <MudRadioGroup @bind-SelectedOption="@AnswerIndex">
            @foreach (var choice in ChoiceAdapterList)
            {
                
                <MudRadio Option="@(choice.Index)" Color="Color.Primary">
                                        <MudTextField Disabled="DisabledChoice()" @bind-Value="choice.Value" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
                </MudRadio>

            }
            </MudRadioGroup>
            
            @if (Question.QuestionType=="ChooseOne")
                {
                    <MudFab @onclick="@(()=>AddChoice())" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" />
                }
            </MudForm>
        
            
        }
        <br />

        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Question</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="Questions" Virtualize="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Questions</MudText>
        <MudSpacer/>
   </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Body</MudTh>
        <MudTh>Question Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Body">@context.Body</MudTd>
        <MudTd DataLabel="Question Type">@context.QuestionType</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>
@code {


    private Question Question{get;set;}=new();
    private List<Question> Questions{get;set;}=new List<Question>();
    private List<ChoiceAdapter>? ChoiceAdapterList = null;
    private int AnswerIndex = -1;
    private String EditState="Add";

    private bool DisabledChoice()
    {
        return Question.QuestionType == "TrueOrFalse";   
    }
    private void AddChoice()
    {
        if(ChoiceAdapterList!=null)ChoiceAdapterList.Add(new ChoiceAdapter { Index=ChoiceAdapterList.Count+1, Value="Choice"+(ChoiceAdapterList.Count+1)});
    }
    protected override async Task OnInitializedAsync()
    {
        GetQuestions();
        CalculateQuestionChoice();
    }
    private void GetQuestions()
    {
        Questions= _context.Questions.ToList();

    }
    private void OnTypeChange(String questionType){
        if (Question.QuestionType != questionType)
        {
            Question.QuestionType = questionType;       
            CalculateQuestionChoice();
        }

    }
    private void CalculateQuestionChoice()
    {

        Question.Choices = new List<String>();
        AnswerIndex = 1;
        switch (Question.QuestionType)  
        {
            case "MultipleChoice":
                Question.Choices.Add("a. Answer a");
                Question.Choices.Add("b. Answer b");
                Question.Choices.Add("c. Answer c");
                Question.Choices.Add("d. Answer d");
                break;
            case "TrueOrFalse":
                Question.Choices.Add("True");
                Question.Choices.Add("False");
                break;
            case "ChooseOne":
                Question.Choices.Add("Choice 1");
                Question.Choices.Add("Choice 2");
                Question.Choices.Add("Choice 3");
                Question.Choices.Add("Choice 4");
                Question.Choices.Add("Choice 5");
                Question.Choices.Add("Choice 6");
                break;
            default:
                Question.Choices = null;
                AnswerIndex = -1;
                break;
        }
        ChoiceAdapterList = Question.GetChoiceAdapters();
    }

    private int GetSaveListCount(List<ChoiceAdapter>? list)
    {
        return list==null?0:list.Count();
    }
    private bool Validate()
    {
         if (string.IsNullOrWhiteSpace(Question.Body) || string.IsNullOrWhiteSpace(Question.QuestionType))
        {
            _snackBar.Add("Body and Question Type should not be empty", Severity.Error);
            return false;
        }

        if(Question.Choices!=null){
            foreach (var t in Question.Choices)
            {
                if (string.IsNullOrWhiteSpace(t))
                {
                    _snackBar.Add("Choices should not be empty at all", Severity.Error);
                    return false;
                }
            }
        }
        return true;

    }
    private async Task Save()
    {

        if (_context.Questions == null || Question == null)
        {
            return;
        }
        Question.AnswerIndex = AnswerIndex==-1?null:AnswerIndex;
        Question.SetChoices(ChoiceAdapterList);
        if (!Validate())
        {
            return;
        }

        if (Question.Id == 0) {
            await _context.Questions.AddAsync(Question);
            await _context.SaveChangesAsync();
            _snackBar.Add("Question Added.", Severity.Success);
            GetQuestions();
            Question = new Question { };
            EditState = "Add";
            ChoiceAdapterList = Question.GetChoiceAdapters();

        }
        else
        {
            _context.Questions.Update(Question);
            await _context.SaveChangesAsync();            
            _snackBar.Add("Question Updated.", Severity.Success);
            Question = new Question{};
            EditState = "Add";
            ChoiceAdapterList = Question.GetChoiceAdapters();
        }
        StateHasChanged();
        //await _context.AddAsync(Question);
        //await _context.SaveChangesAsync();
    }
    private void Edit(int id)
    {
        if (Questions == null) {
            return;
        }
        Question = Questions.FirstOrDefault(q => q.Id == id);
        if(Question==null){
            return;
        }
        AnswerIndex = Question.AnswerIndex??-1;
        ChoiceAdapterList = Question.GetChoiceAdapters();
        EditState = "Edit";
    }

    private async void Delete(int id)
    {
        var question = _context.Questions.FirstOrDefault(q => q.Id == id);
        if(question!=null)
        {
            _context.Questions.Remove(question);
            await _context.SaveChangesAsync();
            Questions.Remove(question);
            if (Question == question)
            {
                Question=new Question();
                EditState = "Add";
                ChoiceAdapterList = Question.GetChoiceAdapters();

            }
            StateHasChanged();

        }
        _snackBar.Add("Question Deleted.", Severity.Success);
    }
    private bool HasChoice(string questionType)
    {
        return questionType == "MultipleChoice" ||
                questionType == "TrueOrFalse" ||
                questionType == "ChooseOne";
    }
}
