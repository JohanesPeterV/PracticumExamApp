// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SLCTestApplication.Data;

#nullable disable

namespace SLCTestApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220602032453_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "cff8b0b4-d86f-4457-a813-b552ad43c959",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "5a4df4c9-d4a1-4d7b-8ce3-e039263ee4d4",
                            Name = "Participant",
                            NormalizedName = "PARTICIPANT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3822de9e-7401-4061-af6c-e40859282ad9",
                            Email = "jp@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JP@GMAIL.COM",
                            NormalizedUserName = "JP@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJkRNjbTd8eWi4A5KfasuB6IaBtZ/4e5Q2To3iVNWVRnoYGeHOpMItVsIzrnvdScag==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95d1e978-a739-41ac-acde-a6c26f4916ad",
                            TwoFactorEnabled = false,
                            UserName = "jp@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70772739-31cd-4a21-8c44-3475ecab2069",
                            Email = "ga@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GA@GMAIL.COM",
                            NormalizedUserName = "GA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDh6pjYIadBTpwqJtmxSDaxYmyO2V6/oi8Midhj+QVJDxtUkISHLJjZHgBQNtg56jA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa9dee45-97cd-4874-995b-45d2b12aa6c5",
                            TwoFactorEnabled = false,
                            UserName = "ga@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ad3ae0d-f193-4632-a3f9-1d9415e314d1",
                            Email = "vn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VN@GMAIL.COM",
                            NormalizedUserName = "VN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBKU4+NNH40dUogytT/iy2VXFfN58l0454Gv8e7f5PdY9kL6k+wnNpCKzzCFlIdr0A==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73ebf81b-2c91-4215-93a7-ad89a5ec6a76",
                            TwoFactorEnabled = false,
                            UserName = "vn@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554823e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24c2ac4c-3b62-441d-8932-0c0789f599c1",
                            Email = "ll@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LL@GMAIL.COM",
                            NormalizedUserName = "LL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENuqnAVGGROxhfO46YyvVsyeZW6aRX0Aea/t+n8vl4KZ5cdaHnBoxWsmT4y1tFrBjA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5729e30d-cd92-49ad-adad-75d66b589da9",
                            TwoFactorEnabled = false,
                            UserName = "ll@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12555413e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92c643d0-16aa-4ffd-80ab-2c5407ac4848",
                            Email = "br@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BR@GMAIL.COM",
                            NormalizedUserName = "BR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPwmRgTgUUJA11kJeCGXnP129gzElUX2SC/w5boivG3HAI8KaKgNqE9zwP4cekutRQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "316fa90e-1d48-4ce4-8d64-cfb7c9fc2460",
                            TwoFactorEnabled = false,
                            UserName = "br@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554823f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bae9ea84-b329-4fdf-8770-96161dd05a10",
                            Email = "cc@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CC@GMAIL.COM",
                            NormalizedUserName = "CC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDSx17o2YVuVL8AHrVrSqPxFsdXaJGL8+E0pRE3NDdJ7mh66E0Lve0rl/WM2VYwgXw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5434b527-6510-4893-978f-b266a3957768",
                            TwoFactorEnabled = false,
                            UserName = "cc@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd23-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f16cdc17-ebf6-462f-8eb4-3aed6e203378",
                            Email = "tc@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TC@GMAIL.COM",
                            NormalizedUserName = "TC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPEe201DSM56hW8Gpnxh3LLWIILf+h9RjV3p7RVYURC851mTNvWRFervcnK/Dnruzg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b61049e6-757f-4409-834b-5b43f3dac748",
                            TwoFactorEnabled = false,
                            UserName = "tc@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554543r5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "742dbf6a-d682-4060-9516-57c2d4c89ec8",
                            Email = "st@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ST@GMAIL.COM",
                            NormalizedUserName = "ST@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBmUDZ0vKMIj9KjAEdYyccfWyAJhapRioNFl7kQT5b/huUIwAd9qcbxKTr0/NedU4Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bac4e16-f0bd-4ec0-82ab-8240796930e4",
                            TwoFactorEnabled = false,
                            UserName = "st@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9135649-6365-447a-9b2e-554e6a2a8a2d",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELfGUrQP2dJGIGxdT2Rwzz8xE2Bc1PrmIP5icxh5ZiBR8tx/eyVuslcWs1YTiZKkfg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e32ee57-d0fb-4295-98a1-71afbbdd3f48",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e1",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e2",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843a5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554823e9",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12555413e5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554823f5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd23-6340-4840-95c2-db12554843e5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554543r5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SLCTestApplication.Data.Answer", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("AnswerString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId", "UserId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e1",
                            ScheduleId = 1,
                            AnswerString = "1"
                        },
                        new
                        {
                            QuestionId = 2,
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e1",
                            ScheduleId = 1,
                            AnswerString = "1"
                        },
                        new
                        {
                            QuestionId = 3,
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e1",
                            ScheduleId = 1,
                            AnswerString = "1"
                        });
                });

            modelBuilder.Entity("SLCTestApplication.Data.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnswerIndex")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "This is an essay.",
                            QuestionType = "Essay"
                        },
                        new
                        {
                            Id = 2,
                            AnswerIndex = 1,
                            Body = "The answer is false.",
                            Choices = "True`False",
                            QuestionType = "TrueOrFalse"
                        },
                        new
                        {
                            Id = 3,
                            AnswerIndex = 6,
                            Body = "The Answer is choice number 6",
                            Choices = "Choice 1`Choice 2`Choice 3`Choice 4`Choice 5`Choice 6",
                            QuestionType = "ChooseOne"
                        },
                        new
                        {
                            Id = 4,
                            AnswerIndex = 3,
                            Body = "The answer is C.",
                            Choices = "a. Answer A`b. Answer B`C. Answer C`d. Answer D",
                            QuestionType = "MultipleChoice"
                        },
                        new
                        {
                            Id = 5,
                            Body = "Upload a file.",
                            QuestionType = "SubmitFile"
                        },
                        new
                        {
                            Id = 6,
                            AnswerIndex = 2,
                            Body = "The answer is true.",
                            Choices = "True`False",
                            QuestionType = "TrueOrFalse"
                        });
                });

            modelBuilder.Entity("SLCTestApplication.Data.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Schedule to determine if u are worthy",
                            EndTime = new DateTime(2022, 6, 2, 10, 24, 53, 646, DateTimeKind.Local).AddTicks(6520),
                            StartTime = new DateTime(2022, 6, 2, 15, 24, 53, 646, DateTimeKind.Local).AddTicks(6476),
                            Title = "NAR Early Schedule"
                        });
                });

            modelBuilder.Entity("SLCTestApplication.Data.ScheduleQuestion", b =>
                {
                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ScheduleQuestions");

                    b.HasData(
                        new
                        {
                            ScheduleId = 1,
                            QuestionId = 1
                        },
                        new
                        {
                            ScheduleId = 1,
                            QuestionId = 2
                        },
                        new
                        {
                            ScheduleId = 1,
                            QuestionId = 3
                        },
                        new
                        {
                            ScheduleId = 1,
                            QuestionId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SLCTestApplication.Data.Answer", b =>
                {
                    b.HasOne("SLCTestApplication.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SLCTestApplication.Data.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SLCTestApplication.Data.ScheduleQuestion", b =>
                {
                    b.HasOne("SLCTestApplication.Data.Question", "Question")
                        .WithMany("ScheduleQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SLCTestApplication.Data.Schedule", "Schedule")
                        .WithMany("ScheduleQuestions")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SLCTestApplication.Data.Question", b =>
                {
                    b.Navigation("ScheduleQuestions");
                });

            modelBuilder.Entity("SLCTestApplication.Data.Schedule", b =>
                {
                    b.Navigation("ScheduleQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
