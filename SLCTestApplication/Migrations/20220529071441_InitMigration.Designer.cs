// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SLCTestApplication.Data;

#nullable disable

namespace SLCTestApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220529071441_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            Name = "Participant",
                            NormalizedName = "Test Participant"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d92b317e-1a8e-4e10-9bb1-8f3454039de5",
                            Email = "jp@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JP@GMAIL.COM",
                            NormalizedUserName = "JP@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOPU+d4B07+tkar/EAyT16QYgtyTarld7g7jpn4yL03tKE/yFma61xJbP3BzIHGtsw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07994a7e-00d8-47b6-8a1e-04a9578bf159",
                            TwoFactorEnabled = false,
                            UserName = "jp@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70e99d56-006c-4b6b-b7d0-0143068b4c9f",
                            Email = "ga@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GA@GMAIL.COM",
                            NormalizedUserName = "GA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKBstyBy//tLPRs5zpEymGFtZY/cZ+3yQtpISSDUjW57M0G3x3GcIeTGxkSminDwcw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "166e07f7-aef6-423e-94b4-11169803d135",
                            TwoFactorEnabled = false,
                            UserName = "ga@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28491322-07a9-4791-9839-73116b265fa1",
                            Email = "vn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VN@GMAIL.COM",
                            NormalizedUserName = "VN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELglETgr7sz6xMxbYLv6GUMPMWB3C/dXHuJXPYp2H8ZBg4/lZzizxcWgW/Gk6NmSzw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4ae600d-b4f8-4ff9-a59d-b61524d2d9e9",
                            TwoFactorEnabled = false,
                            UserName = "vn@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554823e9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6b37de3-27a5-4017-8dd9-1f82ed9f0620",
                            Email = "ll@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LL@GMAIL.COM",
                            NormalizedUserName = "LL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBaZ+3Lr8zwxaoxOO1JWPah0RwrqUKpuISMFsiB9bcHC+cWGjxY6q5hk+qvvacqsBA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f9f4fb2-3b28-439b-9308-5e8257121ee7",
                            TwoFactorEnabled = false,
                            UserName = "ll@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12555413e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8dc41c12-e38c-4f44-9d3c-301b1caaefb5",
                            Email = "br@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BR@GMAIL.COM",
                            NormalizedUserName = "BR@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFlzmv4H7mC2O4rVAIQnCGFtuAhD1ritT1Z6XOz1liX76YQhJkenDpkb14N/iCFrWg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bb4d4c4-76a2-476d-ae3e-5a4b2b2dc0a5",
                            TwoFactorEnabled = false,
                            UserName = "br@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554823f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac4bd003-6907-4bec-bdff-eec11c22afeb",
                            Email = "cc@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CC@GMAIL.COM",
                            NormalizedUserName = "CC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZYpSPgYcKfVsMpl7wRHkHYSc90bKctNKIyzBvgiIlyZiJ3CxVysoA3b6k7eRvfZg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0dfb71ec-03cd-4687-9ca8-7c11343ea188",
                            TwoFactorEnabled = false,
                            UserName = "cc@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd23-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5334a4d-0151-4f5c-8abd-60f84f0b1b53",
                            Email = "tc@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TC@GMAIL.COM",
                            NormalizedUserName = "TC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMdSxnS+xv+SoPnDYGYENcPwfAvlG8QEDFIaFaZJbfD4EzYjL8yI40C2Sm89genojg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1719a78d-84f8-4c63-878e-c87881f1f0f4",
                            TwoFactorEnabled = false,
                            UserName = "tc@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554543r5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb7aa656-45b6-487d-a0c1-847e237f65b4",
                            Email = "st@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ST@GMAIL.COM",
                            NormalizedUserName = "ST@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPWMRIIKwqCjs2Pcq8NGOx/yX61Flf4JqBpg8ymZOyCYxHhgvFhobPVdjoUhHDu9Qw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66d2388b-2b28-4058-9a69-1e67e009c79b",
                            TwoFactorEnabled = false,
                            UserName = "st@gmail.com"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8a00a08-9443-407a-8ff1-8e2889ba771b",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPckIexXkMN0wusZw+p3xr7m4QD9ru6N8nhMDKMcgvfb9Vm9DJL8zC4BMkcen4DPjA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b922726b-7dbd-48eb-b2bb-0b7093e33191",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e1",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e2",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843a5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554823e9",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12555413e5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554823f5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd23-6340-4840-95c2-db12554843e5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554543r5",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SLCTestApplication.Data.Answer", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnswerString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            QuestionId = 2,
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e1",
                            AnswerString = "1"
                        });
                });

            modelBuilder.Entity("SLCTestApplication.Data.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnswerIndex")
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choices")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "This is an essay.",
                            QuestionType = "Essay"
                        },
                        new
                        {
                            Id = 2,
                            AnswerIndex = 1,
                            Body = "The answer is false.",
                            Choices = "True`False",
                            QuestionType = "TrueOrFalse"
                        },
                        new
                        {
                            Id = 3,
                            AnswerIndex = 6,
                            Body = "The Answer is choice number 6",
                            Choices = "Choice 1`Choice 2`Choice 3`Choice 4`Choice 5`Choice 6`Choice 7`Choice 8`Choice 9",
                            QuestionType = "ChooseOne"
                        },
                        new
                        {
                            Id = 4,
                            AnswerIndex = 3,
                            Body = "The answer is C.",
                            Choices = "a. Answer A`b. Answer B`C. Answer C`d. Answer D",
                            QuestionType = "MultipleChoice"
                        },
                        new
                        {
                            Id = 5,
                            Body = "Upload a file.",
                            QuestionType = "SubmitFile"
                        },
                        new
                        {
                            Id = 6,
                            AnswerIndex = 2,
                            Body = "The answer is true.",
                            Choices = "True`False",
                            QuestionType = "TrueOrFalse"
                        });
                });

            modelBuilder.Entity("SLCTestApplication.Data.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Test to determine if u are worthy",
                            EndTime = new DateTime(2022, 5, 29, 14, 14, 41, 214, DateTimeKind.Local).AddTicks(9366),
                            StartTime = new DateTime(2022, 5, 29, 19, 14, 41, 214, DateTimeKind.Local).AddTicks(9323),
                            Title = "NAR Early Test"
                        });
                });

            modelBuilder.Entity("SLCTestApplication.Data.TestQuestion", b =>
                {
                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("TestId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestQuestion");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            QuestionId = 1
                        },
                        new
                        {
                            TestId = 1,
                            QuestionId = 2
                        },
                        new
                        {
                            TestId = 1,
                            QuestionId = 3
                        },
                        new
                        {
                            TestId = 1,
                            QuestionId = 4
                        },
                        new
                        {
                            TestId = 1,
                            QuestionId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SLCTestApplication.Data.Answer", b =>
                {
                    b.HasOne("SLCTestApplication.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SLCTestApplication.Data.TestQuestion", b =>
                {
                    b.HasOne("SLCTestApplication.Data.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SLCTestApplication.Data.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("SLCTestApplication.Data.Test", b =>
                {
                    b.Navigation("TestQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
